name: build_ubuntu

on:
  push:
    branches:
      - master
    paths:
      - user-entrypoint.sh
      - Dockerfile.debian
      - .github/workflows/build_ubuntu.yml
      - su-exec/**
  pull_request:
    branches:
      - master
    paths:
      - user-entrypoint.sh
      - Dockerfile.debian
      - .github/workflows/build_ubuntu.yml
      - su-exec/**
  repository_dispatch:
    types:
      - ubuntu_image_update

jobs:
  docker:
    runs-on: ubuntu-latest
    permissions:
      packages: write
    env:
      TITLE: User Ubuntu
    strategy:
      matrix:
        include:
          - base-image: ubuntu:20.04
            dockerfile: Dockerfile.debian
            platforms: |-
              linux/amd64
              linux/arm/v7
              linux/arm64
              linux/ppc64le
              linux/s390x
            tags: |-
              ghcr.io/phasecorex/user-ubuntu:20.04
              ghcr.io/phasecorex/user-ubuntu:focal
              docker.io/phasecorex/user-ubuntu:20.04
              docker.io/phasecorex/user-ubuntu:focal
            cache-from: ghcr.io/phasecorex/user-ubuntu:20.04
          - base-image: ubuntu:22.04
            dockerfile: Dockerfile.debian
            platforms: |-
              linux/amd64
              linux/arm/v7
              linux/arm64
              linux/ppc64le
              linux/s390x
            tags: |-
              ghcr.io/phasecorex/user-ubuntu:22.04
              ghcr.io/phasecorex/user-ubuntu:jammy
              ghcr.io/phasecorex/user-ubuntu:latest
              docker.io/phasecorex/user-ubuntu:22.04
              docker.io/phasecorex/user-ubuntu:jammy
              docker.io/phasecorex/user-ubuntu:latest
            cache-from: ghcr.io/phasecorex/user-ubuntu:22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: phasecorex/user-ubuntu
          labels: |
            maintainer=${{ github.repository_owner }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.title=${{ env.TITLE }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push ${{ matrix.base-image }}
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          platforms: ${{ matrix.platforms }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ matrix.tags }}
          cache-from: ${{ matrix.cache-from }}
          build-args: |
            BASE_IMG=${{ matrix.base-image }}
          labels: ${{ steps.meta.outputs.labels }}
